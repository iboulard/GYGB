<?php

namespace GYGB\BackBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StepRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StepRepository extends EntityRepository
{
    public function findCategoryTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += $step->getCount();
            $categoryTotals[$step->getCategory()] += $step->getCount();
        }

        return $categoryTotals;
    }
    
    public function findByFiltersAndSorts($em, $category, $sort, $savings, $type)
    {
        $query = $this->createQueryBuilder('s');

        if(isset($savings) && $savings != 'all')
        {
            $query->andWhere('s.savings = :savings');
            $query->setParameter('savings', $savings);
        }

        if(isset($category) && $category != 'all')
        {
            // categories are a space delimited string
            // add a "where category = x OR category = y"
            $categories = explode(' ', $category);
            $categoryWhere = '';
            $i = 0;
            foreach($categories as $c)
            {
                $categoryWhere .= 's.category = :category' . $i . ' OR ';
                $query->setParameter('category' . $i, $c);

                $i++;
            }

            $categoryWhere = rtrim($categoryWhere, ' OR ');
            $query->andWhere($categoryWhere);
        }

        if(isset($type) && $type != 'all')
        {
            $query->andWhere("s.type = :type");
            $query->setParameter('type', $type);
        }
        
        if(isset($sort) && $sort == 'popular')
        {
            $query->join('s.submissions', 'ss');
            $query->groupBy('s.id');
            $query->orderBy('s.count', 'DESC');
        }
        else if(isset($sort) && $sort == 'recent')
        {
            $query->join('s.submissions', 'ss');
            $query->orderBy('ss.datetimeSubmitted', 'DESC');
        }

        $query->andWhere('s.approved = true');

        return $query->getQuery()->getResult();
    }

}