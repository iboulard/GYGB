<?php

namespace GYGB\BackBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StepRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StepRepository extends EntityRepository
{

    public function findCategoryStepTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += 1;
            $categoryTotals[$step->getCategory()] += 1;
        }

        return $categoryTotals;
    }

    public function findCategoryStepSubmissionTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += $step->getStepCount();
            $categoryTotals[$step->getCategory()] += $step->getStepCount();
        }

        return $categoryTotals;
    }

    public function findCategoryCommitmentsTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += $step->getCommitmentCount();
            $categoryTotals[$step->getCategory()] += $step->getCommitmentCount();
        }

        return $categoryTotals;
    }

    public function findByTerms($em, $terms)
    {
        $query = $this->createQueryBuilder('s');
        $query->andWhere('s.title LIKE :title');
        $query->andWhere('s.approved = 1');
        $query->setParameter('title', '%' . $terms . '%');

        return $query->getQuery()->getResult();
    }

    public function findRecentlyTaken($em)
    {
        $query = $this->createQueryBuilder('s');
        $query->leftJoin('s.stepSubmissions', 'ss');
        $query->orderBy('ss.datetimeSubmitted', 'DESC');
        $query->andWhere('s.approved = 1');
        $results = $query->getQuery()->getResult();
        
        return $results;
    }
    
}