<?php

namespace GYGB\BackBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StepRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StepRepository extends EntityRepository
{

    public function findCategoryStepTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += 1;
            $categoryTotals[$step->getCategory()] += 1;
        }

        return $categoryTotals;
    }

    public function findCategoryStepSubmissionTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += $step->getStepCount();
            $categoryTotals[$step->getCategory()] += $step->getStepCount();
        }

        return $categoryTotals;
    }

    public function findCategoryCommitmentsTotals()
    {
        $allSteps = $this->findBy(array('approved' => true));
        $categoryTotals = array('all' => 0, 'transportation' => 0, 'food' => 0, 'waste' => 0, 'energy' => 0, 'general' => 0);
        $totalSteps = 0;
        foreach($allSteps as $step)
        {
            $categoryTotals['all'] += $step->getCommitmentCount();
            $categoryTotals[$step->getCategory()] += $step->getCommitmentCount();
        }

        return $categoryTotals;
    }

    public function findByTerms($em, $terms)
    {
        $query = $this->createQueryBuilder('s');
        $query->andWhere('s.title LIKE :title');
        $query->setParameter('title', '%' . $terms . '%');

        return $query->getQuery()->getResult();
    }

    public function findRecentlyTaken($em)
    {
        $query = $this->createQueryBuilder('s');
        $query->join('s.stepSubmissions', 'ss');
        $query->orderBy('ss.datetimeSubmitted', 'DESC');
        $query->andWhere('s.approved = true');
        $resultsA = $query->getQuery()->getResult();
        
        $queryB = $this->createQueryBuilder('sb');
        $queryB->andWhere('sb.stepCount = 0');
        $resultsB = $queryB->getQuery()->getResult();
        
        return array_merge($resultsA, $resultsB);
    }
    
    public function findAllEvents($stepSubmissionRepository, $commitmentRepository)
    {
        $submissions = $stepSubmissionRepository->findAll();
        $commitments = $commitmentRepository->findAll();
        
        $submissionEvents = $this->turnStepsSubmissionsIntoEvents($submissions);
        $commitmentEvents = $this->turnCommitmentsIntoEvents($commitments);
                
        $events = array_merge($submissionEvents, $commitmentEvents);
        
        uasort($events, 'self::compareEvent');
        
        return $events;        
    }
    
    public function findEventsByStep($step)
    {
        // build array of commitments and submissions for step.id
        
        // add a ":" to name if commitment/story is abbreviated
        // add quotes around text if commitment/story is abbreviated
        // abbreviate commitment/story if possible
        $submissions = $step->getStepSubmissions();
        $commitments = $step->getCommitments();
        
        $submissionEvents = $this->turnStepsSubmissionsIntoEvents($submissions);
        $commitmentEvents = $this->turnCommitmentsIntoEvents($commitments);
                
        $events = array_merge($submissionEvents, $commitmentEvents);
        
        uasort($events, 'self::compareEvent');
        
        return $events;
    }
    
    protected function turnStepsSubmissionsIntoEvents($submissions)
    {
        $events = array();
        
        foreach($submissions as $s)
        {
            $e = array();
            if($s->storyCanBeAbbreviated())
            {
                $e['name'] = $s->getName();
                $e['text'] = $s->getAbbreviatedStory();
            }
            else
            {
                $e['name'] = $s->getName().': ';
                $e['text'] = '"'.$s->getAbbreviatedStory().'"';
            }
            $e['datetime'] = $s->getDatetimeSubmitted();                
            $e['category'] = $s->getStep()->getCategory();
            $e['stepId'] = $s->getStep()->getId();
            
            $events[] = $e;
        }
        
        return $events;
    }

    public function turnCommitmentsIntoEvents($commitments)
    {
        $events = array();
        
        foreach($commitments as $c)
        {
            $e = array();
            if($c->commitmentCanBeAbbreviated())
            {
                $e['name'] = $c->getName();
                $e['text'] = $c->getAbbreviatedCommitment();
            }
            else
            {
                $e['name'] = $c->getName().': ';
                $e['text'] = '"'.$c->getAbbreviatedCommitment().'"';
            }
            $e['datetime'] = $c->getDatetimeSubmitted();                
            $e['category'] = $c->getStep()->getCategory();
            $e['stepId'] = $c->getStep()->getId();
            
            $events[] = $e;
        }
        
        return $events;
    }



    static function compareEvent($a, $b) {
        if ($a == $b) {
            return 0;
        }
        return ($a['datetime'] > $b['datetime']) ? -1 : 1;
    }
    
   
    
}